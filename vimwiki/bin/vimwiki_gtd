#!/usr/bin/env python3

# Usage:
# vimwiki_gtd path_to_projects.md
# Returns a JSON version of the file passed to it, for use by other tools

# This script is janky, but it does work.

import os, sys
from pathlib import Path
import json
import re

path_to_projects = Path(sys.argv[1])
projects_text = path_to_projects.read_text()
projects_text_lines = projects_text.split('\n')

# Tasks are:
# - text: String
# - done: Boolean
# - children: [Task]
# - tags: [String]
task_template = { 'text' : '', 'done': False, 'tags': [], 'line_number': -1, 'children' : [] }

# Projects are:
# - name: String
# - children: [Project]
# - tasks: [Task]
project_template = { 'name' : '', 'tasks': [], 'line_number': -1 ,'children' : [] }

# Takes an array of line dictionaries and returns an array of tasks
def lines_into_tasks(all_lines, lines, depth=0):
    tasks = [ ]
    prefix = (depth * '    ') + '- ['
    for line in lines:
        if line['text'].startswith(prefix):
            task = task_template.copy()
            task['text'] = line['text'].strip().removeprefix('- [X]').removeprefix('- [ ]').removeprefix('- [O]').strip()
            task['line_number'] = line['line_number']
            if line['text'].strip().startswith('- [X]'):
                task['done'] = True
            task['tags'] = re.findall(r'@\S*', line['text'])
            tasks.append(task)

    for task_index in range(0, len(tasks)):
        task = tasks[task_index]
        task_line_end = lines[-1]['line_number']
        if task_index < len(tasks) - 1:
            task_line_end = tasks[task_index+1]['line_number']
        task['children'] = lines_into_tasks(all_lines, all_lines[task['line_number']:task_line_end], depth+1)

    return tasks

# Takes an array of line dictionaries and returns an array of projects
def lines_into_projects(all_lines, lines, depth=0):
    projects = [ ]
    prefix = "#" * (depth+1) + ' '
    for line in lines:
        if line['text'].startswith(prefix):
            project = project_template.copy()
            project['name'] = line['text'].removeprefix(prefix).strip()
            project['line_number'] = line['line_number']
            projects.append(project)

    for project_index in range(0, len(projects)):
        project = projects[project_index]
        project_line_end = lines[-1]['line_number']
        if project_index < len(projects) - 1:
            project_line_end = projects[project_index+1]['line_number']

        project['children'] = lines_into_projects(all_lines, all_lines[project['line_number']:project_line_end], depth+1)

        project_specific_line_end = project_line_end
        if len(project['children']) > 0:
            project_specific_line_end = project['children'][0]['line_number']

        info_lines = all_lines[project['line_number']:project_specific_line_end]
        project['tasks'] = lines_into_tasks(all_lines, info_lines)

    return projects

lines_with_numbers = [ ]
for line_number in range(0, len(projects_text_lines)):
    line = projects_text_lines[line_number]
    lines_with_numbers.append({'text' : line, 'line_number' : line_number})

out = { }
out['projects'] = lines_into_projects(lines_with_numbers, lines_with_numbers)

print(json.dumps(out, indent=2))


